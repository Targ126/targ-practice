// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.3.0-wicked-fork
// source: query.sql

package space

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/rs/zerolog/log"
)

const getById = `-- name: GetById :one
select id, name, created_at, updated_at from space where id=$1 limit 1
`

// -- timeout :5s
func (q *Queries) GetById(ctx context.Context, id int64) (*Space, error) {
	return _GetById(ctx, q.AsReadOnly(), id)
}

func (q *ReadOnlyQueries) GetById(ctx context.Context, id int64) (*Space, error) {
	return _GetById(ctx, q, id)
}

func _GetById(ctx context.Context, q CacheQuerierConn, id int64) (*Space, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	q.GetConn().CountIntent("space.GetById")
	row := q.GetConn().WQueryRow(qctx, "space.GetById", getById, id)
	var i *Space = new(Space)
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Space)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const getByIdWithCache = `-- name: GetByIdWithCache :one
select id, name, created_at, updated_at from space where id=$1 limit 1
`

// -- timeout :5s
// -- cache: 10s
func (q *Queries) GetByIdWithCache(ctx context.Context, id int64) (*Space, error) {
	return _GetByIdWithCache(ctx, q.AsReadOnly(), id)
}

func (q *ReadOnlyQueries) GetByIdWithCache(ctx context.Context, id int64) (*Space, error) {
	return _GetByIdWithCache(ctx, q, id)
}

func _GetByIdWithCache(ctx context.Context, q CacheQuerierConn, id int64) (*Space, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	q.GetConn().CountIntent("space.GetByIdWithCache")
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 10000)
		row := q.GetConn().WQueryRow(qctx, "space.GetByIdWithCache", getByIdWithCache, id)
		var i *Space = new(Space)
		err := row.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if err == pgx.ErrNoRows {
			return (*Space)(nil), cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.GetCache() == nil {
		i, _, err := dbRead()
		return i.(*Space), err
	}

	var i *Space
	err := q.GetCache().GetWithTtl(qctx, "space:GetByIdWithCache:"+hashIfLong(fmt.Sprintf("%+v", id)), &i, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return i, err
}

const getByName = `-- name: GetByName :one
select id, name, created_at, updated_at from space where name=$1 limit 1
`

// -- timeout :5s
func (q *Queries) GetByName(ctx context.Context, name string) (*Space, error) {
	return _GetByName(ctx, q.AsReadOnly(), name)
}

func (q *ReadOnlyQueries) GetByName(ctx context.Context, name string) (*Space, error) {
	return _GetByName(ctx, q, name)
}

func _GetByName(ctx context.Context, q CacheQuerierConn, name string) (*Space, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	q.GetConn().CountIntent("space.GetByName")
	row := q.GetConn().WQueryRow(qctx, "space.GetByName", getByName, name)
	var i *Space = new(Space)
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Space)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const updateName1 = `-- name: UpdateName1 :exec
update space set name=$1, updated_at=now() where id=$2
`

type UpdateName1Params struct {
	Name string
	ID   int64
}

// -- timeout :5s
func (q *Queries) UpdateName1(ctx context.Context, arg UpdateName1Params) error {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	_, err := q.db.WExec(qctx, "space.UpdateName1", updateName1, arg.Name, arg.ID)
	if err != nil {
		return err
	}

	return nil
}

const updateName2 = `-- name: UpdateName2 :one
update space set name=$1, updated_at=now() where id=$2 returning id, name, created_at, updated_at
`

type UpdateName2Params struct {
	Name string
	ID   int64
}

// -- timeout :5s
func (q *Queries) UpdateName2(ctx context.Context, arg UpdateName2Params) (*Space, error) {
	return _UpdateName2(ctx, q.AsReadOnly(), arg)
}

func _UpdateName2(ctx context.Context, q CacheQuerierConn, arg UpdateName2Params) (*Space, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	row := q.GetConn().WQueryRow(qctx, "space.UpdateName2", updateName2, arg.Name, arg.ID)
	var i *Space = new(Space)
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Space)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const updateName3 = `-- name: UpdateName3 :one
update space set name=$1, updated_at=now() where id=$2 returning id, name, created_at, updated_at
`

type UpdateName3Params struct {
	Name string
	ID   int64
}

// -- timeout :5s
// -- invalidate: [GetByIdWithCache]
func (q *Queries) UpdateName3(ctx context.Context, arg UpdateName3Params, getByIdWithCache *int64) (*Space, error) {
	return _UpdateName3(ctx, q, arg, getByIdWithCache)
}

func _UpdateName3(ctx context.Context, q CacheWGConn, arg UpdateName3Params, getByIdWithCache *int64) (*Space, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	row := q.GetConn().WQueryRow(qctx, "space.UpdateName3", updateName3, arg.Name, arg.ID)
	var i *Space = new(Space)
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Space)(nil), nil
	} else if err != nil {
		return nil, err
	}

	// invalidate
	_ = q.GetConn().PostExec(func() error {
		anyErr := make(chan error, 1)
		var wg sync.WaitGroup
		wg.Add(1)
		go func() {
			defer wg.Done()
			if getByIdWithCache != nil {
				key := "space:GetByIdWithCache:" + hashIfLong(fmt.Sprintf("%+v", (*getByIdWithCache)))
				err = q.GetCache().Invalidate(ctx, key)
				if err != nil {
					log.Ctx(ctx).Error().Err(err).Msgf(
						"Failed to invalidate: %s", key)
					anyErr <- err
				}
			}
		}()
		wg.Wait()
		close(anyErr)
		return <-anyErr
	})
	return i, err
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT id,name,created_at,updated_at FROM \"space\" ORDER BY id,name,created_at,updated_at ASC;"
	rows, err := q.db.WQuery(ctx, "space.Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Space
	for rows.Next() {
		var v Space
		if err := rows.Scan(&v.ID, &v.Name, &v.CreatedAt, &v.UpdatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO \"space\" (id,name,created_at,updated_at) VALUES ($1,$2,$3,$4);"
	rows := make([]Space, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "space.Load", sql, row.ID, row.Name, row.CreatedAt, row.UpdatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

func hashIfLong(v string) string {
	if len(v) > 64 {
		hash := sha256.Sum256([]byte(v))
		return "h(" + hex.EncodeToString(hash[:]) + ")"
	}
	return v
}

func ptrStr[T any](v *T) string {
	if v == nil {
		return "<nil>"
	}
	return fmt.Sprintf("%+v", *v)
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
var _ = sha256.Sum256(nil)
var _ = hex.EncodeToString(nil)
var _ = sync.WaitGroup{}
